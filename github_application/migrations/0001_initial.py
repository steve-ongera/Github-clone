# Generated by Django 5.2.4 on 2025-09-29 20:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('commit_sha', models.CharField(max_length=40)),
                ('protected', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'branches',
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('color', models.CharField(max_length=6)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'labels',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('location', models.CharField(blank=True, max_length=100)),
                ('website', models.URLField(blank=True)),
                ('company', models.CharField(blank=True, max_length=100)),
                ('twitter_username', models.CharField(blank=True, max_length=50)),
                ('followers_count', models.IntegerField(default=0)),
                ('following_count', models.IntegerField(default=0)),
                ('public_repos_count', models.IntegerField(default=0)),
                ('private_repos_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_organization', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccessToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('token', models.CharField(max_length=200, unique=True)),
                ('scopes', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'access_tokens',
            },
        ),
        migrations.CreateModel(
            name='Commit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sha', models.CharField(max_length=40, unique=True)),
                ('author_name', models.CharField(max_length=200)),
                ('author_email', models.EmailField(max_length=254)),
                ('committer_name', models.CharField(max_length=200)),
                ('committer_email', models.EmailField(max_length=254)),
                ('message', models.TextField()),
                ('parent_shas', models.JSONField(default=list)),
                ('tree_sha', models.CharField(max_length=40)),
                ('additions', models.IntegerField(default=0)),
                ('deletions', models.IntegerField(default=0)),
                ('total_changes', models.IntegerField(default=0)),
                ('committed_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authored_commits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'commits',
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('title', models.CharField(max_length=500)),
                ('body', models.TextField(blank=True)),
                ('state', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed')], default='open', max_length=10)),
                ('locked', models.BooleanField(default=False)),
                ('comments_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('assignees', models.ManyToManyField(blank=True, related_name='assigned_issues', to=settings.AUTH_USER_MODEL)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_issues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'issues',
            },
        ),
        migrations.CreateModel(
            name='IssueLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_labels', to='github_application.issue')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labeled_issues', to='github_application.label')),
            ],
            options={
                'db_table': 'issue_labels',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='org_avatars/')),
                ('website', models.URLField(blank=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_organizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organizations',
            },
        ),
        migrations.CreateModel(
            name='OrganizationMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('member', 'Member')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='github_application.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_members',
            },
        ),
        migrations.CreateModel(
            name='PullRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('title', models.CharField(max_length=500)),
                ('body', models.TextField(blank=True)),
                ('head_branch', models.CharField(max_length=100)),
                ('base_branch', models.CharField(max_length=100)),
                ('head_sha', models.CharField(max_length=40)),
                ('base_sha', models.CharField(max_length=40)),
                ('state', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('merged', 'Merged')], default='open', max_length=10)),
                ('merged', models.BooleanField(default=False)),
                ('merged_at', models.DateTimeField(blank=True, null=True)),
                ('merge_commit_sha', models.CharField(blank=True, max_length=40)),
                ('draft', models.BooleanField(default=False)),
                ('locked', models.BooleanField(default=False)),
                ('comments_count', models.IntegerField(default=0)),
                ('commits_count', models.IntegerField(default=0)),
                ('additions', models.IntegerField(default=0)),
                ('deletions', models.IntegerField(default=0)),
                ('changed_files', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('assignees', models.ManyToManyField(blank=True, related_name='assigned_prs', to=settings.AUTH_USER_MODEL)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_prs', to=settings.AUTH_USER_MODEL)),
                ('merged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='merged_prs', to=settings.AUTH_USER_MODEL)),
                ('reviewers', models.ManyToManyField(blank=True, related_name='reviewing_prs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pull_requests',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='github_application.issue')),
                ('pull_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='github_application.pullrequest')),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='PullRequestLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labeled_prs', to='github_application.label')),
                ('pull_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pr_labels', to='github_application.pullrequest')),
            ],
            options={
                'db_table': 'pull_request_labels',
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(max_length=100)),
                ('target_commitish', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=200)),
                ('body', models.TextField(blank=True)),
                ('draft', models.BooleanField(default=False)),
                ('prerelease', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='releases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'releases',
            },
        ),
        migrations.CreateModel(
            name='ReleaseAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(blank=True, max_length=255)),
                ('content_type', models.CharField(max_length=100)),
                ('size', models.BigIntegerField()),
                ('download_count', models.IntegerField(default=0)),
                ('file', models.FileField(upload_to='release_assets/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='github_application.release')),
                ('uploader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'release_assets',
            },
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='public', max_length=10)),
                ('is_fork', models.BooleanField(default=False)),
                ('default_branch', models.CharField(default='main', max_length=100)),
                ('language', models.CharField(blank=True, max_length=50)),
                ('stars_count', models.IntegerField(default=0)),
                ('forks_count', models.IntegerField(default=0)),
                ('watchers_count', models.IntegerField(default=0)),
                ('open_issues_count', models.IntegerField(default=0)),
                ('size', models.BigIntegerField(default=0)),
                ('homepage', models.URLField(blank=True)),
                ('topics', models.JSONField(blank=True, default=list)),
                ('has_issues', models.BooleanField(default=True)),
                ('has_projects', models.BooleanField(default=True)),
                ('has_wiki', models.BooleanField(default=True)),
                ('has_downloads', models.BooleanField(default=True)),
                ('archived', models.BooleanField(default=False)),
                ('disabled', models.BooleanField(default=False)),
                ('license', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pushed_at', models.DateTimeField(blank=True, null=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='repositories', to='github_application.organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repositories', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forks', to='github_application.repository')),
            ],
            options={
                'db_table': 'repositories',
            },
        ),
        migrations.AddField(
            model_name='release',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='releases', to='github_application.repository'),
        ),
        migrations.AddField(
            model_name='pullrequest',
            name='head_repo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='head_prs', to='github_application.repository'),
        ),
        migrations.AddField(
            model_name='pullrequest',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pull_requests', to='github_application.repository'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('issue', 'Issue'), ('pull_request', 'Pull Request'), ('commit', 'Commit'), ('release', 'Release'), ('mention', 'Mention')], max_length=20)),
                ('subject', models.CharField(max_length=500)),
                ('reason', models.CharField(max_length=50)),
                ('unread', models.BooleanField(default=True)),
                ('url', models.URLField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='github_application.repository')),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.AddField(
            model_name='label',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='github_application.repository'),
        ),
        migrations.AddField(
            model_name='issue',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='github_application.repository'),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('name', models.CharField(max_length=255)),
                ('size', models.BigIntegerField()),
                ('sha', models.CharField(max_length=40)),
                ('content_type', models.CharField(max_length=100)),
                ('is_binary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='github_application.branch')),
                ('last_commit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='github_application.commit')),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='github_application.repository')),
            ],
            options={
                'db_table': 'files',
            },
        ),
        migrations.AddField(
            model_name='commit',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commits', to='github_application.repository'),
        ),
        migrations.AddField(
            model_name='branch',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='github_application.repository'),
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('push', 'Push'), ('create', 'Create'), ('delete', 'Delete'), ('fork', 'Fork'), ('star', 'Star'), ('watch', 'Watch'), ('issue', 'Issue'), ('pull_request', 'Pull Request'), ('release', 'Release'), ('follow', 'Follow')], max_length=20)),
                ('payload', models.JSONField(default=dict)),
                ('public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='github_application.repository')),
            ],
            options={
                'db_table': 'activities',
            },
        ),
        migrations.CreateModel(
            name='RepositoryCollaborator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('read', 'Read'), ('write', 'Write'), ('admin', 'Admin')], default='read', max_length=10)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborators', to='github_application.repository')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborating_repos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'repository_collaborators',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(blank=True)),
                ('state', models.CharField(choices=[('pending', 'Pending'), ('commented', 'Commented'), ('approved', 'Approved'), ('changes_requested', 'Changes Requested'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('commit_sha', models.CharField(max_length=40)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pull_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='github_application.pullrequest')),
                ('reviewer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews',
            },
        ),
        migrations.CreateModel(
            name='ReviewComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('path', models.TextField()),
                ('position', models.IntegerField()),
                ('line', models.IntegerField()),
                ('commit_sha', models.CharField(max_length=40)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('in_reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='github_application.reviewcomment')),
                ('pull_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_comments', to='github_application.pullrequest')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_comments', to='github_application.review')),
            ],
            options={
                'db_table': 'review_comments',
            },
        ),
        migrations.CreateModel(
            name='SSHKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('key', models.TextField()),
                ('fingerprint', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ssh_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ssh_keys',
            },
        ),
        migrations.CreateModel(
            name='Star',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stars', to='github_application.repository')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starred_repos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'stars',
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_follows',
            },
        ),
        migrations.CreateModel(
            name='Watch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watchers', to='github_application.repository')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watched_repos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'watches',
            },
        ),
        migrations.CreateModel(
            name='Webhook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500)),
                ('content_type', models.CharField(default='application/json', max_length=50)),
                ('secret', models.CharField(blank=True, max_length=200)),
                ('events', models.JSONField(default=list)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhooks', to='github_application.repository')),
            ],
            options={
                'db_table': 'webhooks',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='users_usernam_baeb4b_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='issuelabel',
            unique_together={('issue', 'label')},
        ),
        migrations.AlterUniqueTogether(
            name='organizationmember',
            unique_together={('organization', 'user')},
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['issue', 'created_at'], name='comments_issue_i_added5_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['pull_request', 'created_at'], name='comments_pull_re_0984ed_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pullrequestlabel',
            unique_together={('pull_request', 'label')},
        ),
        migrations.AddIndex(
            model_name='repository',
            index=models.Index(fields=['owner', 'name'], name='repositorie_owner_i_edda75_idx'),
        ),
        migrations.AddIndex(
            model_name='repository',
            index=models.Index(fields=['visibility', 'created_at'], name='repositorie_visibil_af2a16_idx'),
        ),
        migrations.AddIndex(
            model_name='repository',
            index=models.Index(fields=['language'], name='repositorie_languag_9b73bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='repository',
            unique_together={('owner', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='release',
            unique_together={('repository', 'tag_name')},
        ),
        migrations.AddIndex(
            model_name='pullrequest',
            index=models.Index(fields=['repository', 'state', 'created_at'], name='pull_reques_reposit_dccdec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pullrequest',
            unique_together={('repository', 'number')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'unread', 'created_at'], name='notificatio_user_id_fe427c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='label',
            unique_together={('repository', 'name')},
        ),
        migrations.AddIndex(
            model_name='issue',
            index=models.Index(fields=['repository', 'state', 'created_at'], name='issues_reposit_7be69b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='issue',
            unique_together={('repository', 'number')},
        ),
        migrations.AlterUniqueTogether(
            name='file',
            unique_together={('repository', 'branch', 'path')},
        ),
        migrations.AddIndex(
            model_name='commit',
            index=models.Index(fields=['repository', 'committed_at'], name='commits_reposit_6cc77b_idx'),
        ),
        migrations.AddIndex(
            model_name='commit',
            index=models.Index(fields=['sha'], name='commits_sha_ae771e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='branch',
            unique_together={('repository', 'name')},
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['user', 'created_at'], name='activities_user_id_3c9068_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['repository', 'created_at'], name='activities_reposit_eb2a5d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='repositorycollaborator',
            unique_together={('repository', 'user')},
        ),
        migrations.AddIndex(
            model_name='star',
            index=models.Index(fields=['user', 'created_at'], name='stars_user_id_cb0c4e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='star',
            unique_together={('repository', 'user')},
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['follower', 'created_at'], name='user_follow_followe_2723af_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['following', 'created_at'], name='user_follow_followi_27587c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'following')},
        ),
        migrations.AlterUniqueTogether(
            name='watch',
            unique_together={('repository', 'user')},
        ),
    ]
